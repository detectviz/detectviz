# Detectviz 主系統設定

app_mode: "production"
instance_name: "${HOSTNAME}"

hot_reload: true

paths:
  data: "./data"
  logs: "./log"
  plugins: "./conf/plugins"
  provisioning: "./conf/provisioning"

node:
  type: "monitor"
  name: "node-1"
  description: "主要監控節點"
  tags: ["production", "critical"]

modules:
  healthcheck:
    enabled: true
  alert:
    enabled: true
    levels: ["info", "warning", "critical"]
  automation:
    enabled: true
  analyzer:
    enabled: true
  notifier:
    enabled: true
  scheduler:
    enabled: true
  collector:
    enabled: true

healthcheck:
  interval_seconds: 30
  timeout_seconds: 5
  max_retries: 3
  targets:
    endpoints:
      - name: "detectviz-api"
        url: "http://localhost:8080/api/health"
        method: "GET"
        expected_status: 200
      - name: "detectviz-metrics"
        url: "http://localhost:8080/metrics"
        method: "GET"
        expected_status: 200
      - name: "mysql"
        url: "http://localhost:3306/ping"
        method: "GET"
        expected_status: 200
      - name: "influxdb"
        url: "http://localhost:8086/health"
        method: "GET"
        expected_status: 200
      - name: "redis"
        url: "http://localhost:6379/ping"
        method: "GET"
        expected_status: 200
      - name: "grafana"
        url: "http://localhost:3000/api/health"
        method: "GET"
        expected_status: 200
      - name: "loki"
        url: "http://localhost:3100/health"
        method: "GET"
        expected_status: 200
      - name: "tempo"
        url: "http://localhost:3200/health"
        method: "GET"
        expected_status: 200

plugin:
  auth:
    keycloak:
      client_id: detectviz
      url: "https://auth.example.com"
  store:
    redis:
      addr: "localhost:6379"
      db: 1
  notifier:
    email:
      smtp_server: "smtp.example.com"
    slack:
      webhook: "https://hooks.slack.com/..."
    line:
      token: "line-token"
    webhook:
      url: "http://webhook.local"

automation:
  enabled_actions: ["shell", "webhook", "ticket", "llm"]
  actions:
    - name: "restart_service"
      type: "shell"
      command: "systemctl restart detectviz"
      timeout: 30
    - name: "create_ticket"
      type: "ticket"
      template: "templates/ticket.yaml"

analyzer:
  methods: ["threshold", "statistical", "ml"]
  models:
    - name: "anomaly_detection"
      type: "ml"
      endpoint: "http://localhost:5000/api/anomaly"

notifier:
  channels: ["email", "slack", "line", "webhook"]
  templates:
    - name: "alert_template"
      type: "email"
      template: "templates/alert_email.yaml"

scheduler:
  timezone: "Asia/Taipei"
  jobs:
    - name: "daily_report"
      schedule: "0 0 * * *"
      handler: "reporter.GenerateDailyReport"
    - name: "cleanup_logs"
      schedule: "0 0 * * 0"
      handler: "maintenance.CleanupLogs"

collector:
  interval_seconds: 60
  sources:
    - name: "system_metrics"
      type: "telegraf"
      config: "telegraf/system.conf"
    - name: "application_metrics"
      type: "prometheus"
      endpoint: "http://localhost:9090/metrics"

storage:
  retention_days: 30
  compression: true
  backup:
    enabled: true
    schedule: "0 0 * * *"
    path: "/backup"

security:
  auth_type: "keycloak"
  encryption:
    algorithm: "aes-256-gcm"
    key_rotation_days: 30
  acl:
    enabled: true
    default_policy: "deny"

logging:
  level: "info"
  format: "json"
  outputs: ["file", "stdout"]
  file:
    path: "/var/log/detectviz"
    max_size_mb: 100
    max_age_days: 30
    max_backups: 10

api:
  version: "v1"
  rate_limit:
    enabled: true
    requests: 100
    period_seconds: 60
  cors:
    allowed_origins: ["http://localhost:8080"]
    allowed_methods: ["GET", "POST", "PUT", "DELETE"]
    allowed_headers: ["*"]

monitoring:
  prometheus:
    enabled: true
    port: 9090
    path: "/metrics"
  grafana:
    enabled: true
    url: "http://localhost:3000"
    api_key: "your-api-key"
